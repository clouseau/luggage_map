<?php
/**
 * @file
 * Drupal needs this blank file.
 */
function luggage_map_field_widget_form_alter(&$element) {
  if(isset($element['#field_name']) && $element['#field_name'] == 'field_map') {
      $element['#element_validate'][] = 'luggage_map_field_map_form_submit';
//    foreach($element as $index => $el) {
//      if(is_int($index)) {
//        $element[$index]['#submit'][] = 'luggage_map_field_map_form_submit';
//        $element[$index]['#executes_submit_callback'] = TRUE;
//      }
//    }
  }
}

function luggage_map_field_map_form_submit(&$element, &$form_state) {
  if($element) {
    $uri = $element[0]['#file']->uri;
  }
}

/**
 * Takes in a csv file containing geographical data to be mapped
 * Note: Row 1 is the heading row
 *
 * =================== Data Format =======================================================
 *
 * Row 1 => label    | latitude  | longitude   | grouping  | grouping color  | comment
 *          ------------------------------------------------------------------------------
 * Row 2 => label1   | 23.73667  | -109.84381  | grouping1 | ylw             | comment one
 *          ------------------------------------------------------------------------------
 * Row 3 => label2   | 23.73499  | -109.84168  | grouping2 | red             | comment two
 *          ------------------------------------------------------------------------------
 * ...
 *
 * =======================================================================================
 *
 * @param $uri - The uri of data file to be opened (e.g public://data.csv)
 */
function _read_map_csv($uri) {
  $file = fopen($uri,'r');
  $points = array();
  $header = fgetcsv($file);
  while(!feof($file)) {
    $row = fgetcsv($file);
    $points[] = array(
      'type' => 'point',
      'lat' => $row[1],
      'lon' => $row[2],
      'popup' => t($row[0]) . '\n ' . t($row[5]),
    );
  }
  fclose($file);
  return $points;
}

/**
 * Implements hook_field_formatter_info()
 */
function luggage_map_field_formatter_info() {
  return array(
    'luggage_map_output' => array(
      'label' => t('Luggage Map Output Map'),
      'field types' => array('file'),
      'description' => t('Uses the data input to output a map with points.')
    )
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function luggage_map_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch($display['type']) {
    case 'luggage_map_output':
      foreach($items as $delta => $item) {
        $styles = leaflet_map_get_info('OSM Mapnik');
        $map = leaflet_render_map($styles,_read_map_csv($item['uri']));
        $element[$delta] = array(
          '#markup' => $map,
        );
      }
      break;
  }
  return $element;
}